// Code generated by protoc-gen-go.
// source: agent/report/host.proto
// DO NOT EDIT!

package report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mess "agent/report/mess"
import mess1 "agent/report/mess"
import mess2 "agent/report/mess"
import mess3 "agent/report/mess"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Host struct {
	Caption  string        `protobuf:"bytes,1,opt,name=Caption" json:"Caption,omitempty"`
	Version  string        `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
	HostName string        `protobuf:"bytes,3,opt,name=HostName" json:"HostName,omitempty"`
	Mem      *mess.Mem     `protobuf:"bytes,4,opt,name=Mem" json:"Mem,omitempty"`
	Cpu      *mess1.Cpu    `protobuf:"bytes,5,opt,name=Cpu" json:"Cpu,omitempty"`
	Swap     *mess2.Swap   `protobuf:"bytes,6,opt,name=Swap" json:"Swap,omitempty"`
	Disk     []*mess3.Disk `protobuf:"bytes,7,rep,name=Disk" json:"Disk,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Host) GetMem() *mess.Mem {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *Host) GetCpu() *mess1.Cpu {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Host) GetSwap() *mess2.Swap {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *Host) GetDisk() []*mess3.Disk {
	if m != nil {
		return m.Disk
	}
	return nil
}

func init() {
	proto.RegisterType((*Host)(nil), "report.Host")
}

func init() { proto.RegisterFile("agent/report/host.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0xcf, 0x4d, 0x6f, 0x82, 0x30,
	0x18, 0xc0, 0xf1, 0x30, 0x18, 0x8c, 0xee, 0xd6, 0xcb, 0x1a, 0x58, 0x16, 0xb2, 0xd3, 0x4e, 0x90,
	0x6c, 0x1f, 0x81, 0x1d, 0xbc, 0xe8, 0xa1, 0x26, 0xde, 0xab, 0x36, 0x4a, 0x4c, 0x69, 0xd3, 0x96,
	0xf8, 0x35, 0xfd, 0x48, 0xf6, 0x69, 0xf1, 0x2d, 0xea, 0x85, 0xe4, 0xf9, 0xff, 0x4a, 0xda, 0x07,
	0x7d, 0xb0, 0x0d, 0xef, 0x6d, 0xa3, 0xb9, 0x92, 0xda, 0x36, 0x5b, 0x69, 0x6c, 0xad, 0xb4, 0xb4,
	0x12, 0xa7, 0x21, 0x15, 0xe5, 0xcd, 0x01, 0xc1, 0x8d, 0x71, 0x1f, 0x11, 0x0e, 0x3d, 0xc2, 0x95,
	0x1a, 0x46, 0xfc, 0xbc, 0x47, 0xb3, 0x67, 0xea, 0xb9, 0xae, 0x3b, 0xb3, 0x0b, 0xfa, 0x7d, 0x88,
	0x50, 0x32, 0x71, 0x8f, 0xc1, 0x04, 0x65, 0x2d, 0x53, 0xb6, 0x93, 0x3d, 0x89, 0xaa, 0xe8, 0x27,
	0xa7, 0xa7, 0x11, 0x64, 0xc1, 0xb5, 0x01, 0x79, 0x09, 0x32, 0x8e, 0xb8, 0x40, 0x6f, 0xf0, 0xef,
	0x8c, 0x09, 0x4e, 0x62, 0x4f, 0xe7, 0x19, 0x97, 0x28, 0x9e, 0x72, 0x41, 0x12, 0x97, 0xdf, 0x7f,
	0xf3, 0x1a, 0xee, 0xad, 0x5d, 0xa0, 0x50, 0x01, 0x5b, 0x35, 0x90, 0xd7, 0x6b, 0x74, 0x81, 0x42,
	0xc5, 0x5f, 0x28, 0x99, 0xbb, 0xe7, 0x93, 0xd4, 0x2b, 0x0a, 0x0a, 0x85, 0xfa, 0x0e, 0xfe, 0xef,
	0x16, 0x20, 0x59, 0x15, 0x5f, 0x1c, 0x0a, 0xf5, 0x7d, 0x99, 0xfa, 0xcd, 0xfe, 0x8e, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x77, 0xe8, 0xb7, 0x6b, 0x72, 0x01, 0x00, 0x00,
}
