// Code generated by protoc-gen-go.
// source: agent/report/process.proto
// DO NOT EDIT!

package report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mess5 "agent/report/mess"
import mess6 "agent/report/mess"
import mess7 "agent/report/mess"
import mess8 "agent/report/mess"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Process struct {
	Pid       int64            `protobuf:"varint,1,opt,name=Pid" json:"Pid,omitempty"`
	ProcState *mess5.ProcState `protobuf:"bytes,2,opt,name=ProcState" json:"ProcState,omitempty"`
	ProcMem   *mess6.ProcMem   `protobuf:"bytes,3,opt,name=ProcMem" json:"ProcMem,omitempty"`
	ProcTime  *mess7.ProcTime  `protobuf:"bytes,4,opt,name=ProcTime" json:"ProcTime,omitempty"`
	ProcArg   *mess8.ProcArg   `protobuf:"bytes,5,opt,name=ProcArg" json:"ProcArg,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Process) GetProcState() *mess5.ProcState {
	if m != nil {
		return m.ProcState
	}
	return nil
}

func (m *Process) GetProcMem() *mess6.ProcMem {
	if m != nil {
		return m.ProcMem
	}
	return nil
}

func (m *Process) GetProcTime() *mess7.ProcTime {
	if m != nil {
		return m.ProcTime
	}
	return nil
}

func (m *Process) GetProcArg() *mess8.ProcArg {
	if m != nil {
		return m.ProcArg
	}
	return nil
}

func init() {
	proto.RegisterType((*Process)(nil), "report.Process")
}

func init() { proto.RegisterFile("agent/report/process.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x4c, 0x4f, 0xcd,
	0x2b, 0xd1, 0x2f, 0x4a, 0x2d, 0xc8, 0x2f, 0x2a, 0xd1, 0x2f, 0x28, 0xca, 0x4f, 0x4e, 0x2d, 0x2e,
	0xd6, 0x03, 0xd2, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x51, 0x29, 0x45, 0x14, 0x35, 0xb9, 0x40, 0x05,
	0x60, 0x85, 0xc1, 0x25, 0x89, 0x25, 0xa9, 0x10, 0xa5, 0x52, 0xf2, 0xd8, 0x95, 0xf8, 0xa6, 0xe6,
	0x42, 0x15, 0x28, 0x60, 0x57, 0x10, 0x92, 0x99, 0x4b, 0xc0, 0x08, 0xc7, 0xa2, 0x74, 0x88, 0x02,
	0xa5, 0x13, 0x8c, 0x5c, 0xec, 0x01, 0x10, 0x07, 0x0a, 0x09, 0x70, 0x31, 0x07, 0x64, 0xa6, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x81, 0x98, 0x42, 0xba, 0x5c, 0x9c, 0x01, 0x30, 0x47, 0x49,
	0x30, 0x01, 0xc5, 0xb9, 0x8d, 0xf8, 0xf5, 0x40, 0xa6, 0xe8, 0xc1, 0x85, 0x83, 0x10, 0x2a, 0x84,
	0xd4, 0x21, 0x66, 0x01, 0x1d, 0x28, 0xc1, 0x0c, 0x56, 0xcc, 0x8b, 0x50, 0x0c, 0x14, 0x0c, 0x82,
	0xc9, 0x0a, 0x69, 0x71, 0x71, 0x04, 0x40, 0x1d, 0x2a, 0xc1, 0x02, 0x56, 0xc9, 0x87, 0x50, 0x09,
	0x12, 0x0d, 0x82, 0xcb, 0xc3, 0x0c, 0x05, 0x3a, 0x59, 0x82, 0x15, 0xdd, 0x50, 0xa0, 0x60, 0x10,
	0x4c, 0x36, 0x89, 0x0d, 0xec, 0x23, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0xb3, 0x8e,
	0xee, 0x7e, 0x01, 0x00, 0x00,
}
